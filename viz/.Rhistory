#-------------- LOAD LIBRARIES --------------#
library(leaflet)
library(sf)
library(rgdal)
library(maps)
library(tidyr)
library(dplyr)
library(viridis)
#-------------- LOAD SHAPE --------------#
shapeData <- sf::read_sf(dsn = "./Shapefile_PLZ", layer = "PLZO_PLZ", as_tibble = F)
#shapeData <- sf::st_read(dsn = "./Shapefile_PLZ", layer = "PLZO_PLZ", as_tibble = F)
#shapeData <- sf::st_read("./Shapefile_PLZ", "PLZO_PLZ", stringsAsFactor = F)
# shapeData <- rgdal::readOGR("./Shapefile_PLZ", "PLZO_PLZ", stringsAsFactor = F)
#-------------- LOAD Data --------------#
# Load data about cup consumptionn per day
wd <- getwd() %>% gsub(pattern = '/03\ Data\ Analytics/.*', replace = '')
cups_per_day <- read_delim(paste0(wd, "/04\ Git/START19-DCN/data_analysis/cups_per_day.tsv"),
"\t",
escape_double = FALSE,
col_types = cols(`PLZ To` = col_number()),
trim_ws = TRUE); rm(wd)
#-------------- LOAD Data --------------#
# Load data about cup consumptionn per day
wd <- getwd() %>% gsub(pattern = '/03\ Data\ Analytics/.*', replace = '')
#-------------- LOAD Data --------------#
# Load data about cup consumptionn per day
wd <- getwd() %>% gsub(pattern = '/03\ Data\ Analytics/.*', replace = '')
cups_per_day <- read_delim(paste0(wd, "/04\ Git/START19-DCN/data_analysis/cups_per_day.tsv"),
"\t",
escape_double = FALSE,
col_types = cols(`PLZ To` = col_number()),
trim_ws = TRUE); rm(wd)
library(readr)
cups_per_day <- read_delim("~/Desktop/StartHack/04 Git/START19-DCN/data_analysis/cups_per_day.tsv",
"\t", escape_double = FALSE, col_types = cols(`PLZ To` = col_number()),
trim_ws = TRUE)
View(cups_per_day)
#-------------- LOAD Data --------------#
# Load data about cup consumptionn per day
cups_per_day <- read_delim("~/Desktop/StartHack/04 Git/START19-DCN/data_analysis/cups_per_day.tsv", "\t", escape_double = FALSE, col_types = cols(`PLZ To` = col_number()), trim_ws = TRUE)
names(cups_per_day)[1] <- "PLZ"
names(cups_per_day)[2] <- "PLZ_Name"
cups_per_day$PLZ <- as.integer(cups_per_day$PLZ)
rm(list = ls())
#-------------- LOAD LIBRARIES --------------#
library(leaflet)
library(sf)
library(rgdal)
library(maps)
library(tidyr)
library(dplyr)
library(viridis)
rm(list = ls())
#-------------- LOAD SHAPE --------------#
shapeData <- sf::read_sf(dsn = "./Shapefile_PLZ", layer = "PLZO_PLZ", as_tibble = F)
#shapeData <- sf::st_read(dsn = "./Shapefile_PLZ", layer = "PLZO_PLZ", as_tibble = F)
#shapeData <- sf::st_read("./Shapefile_PLZ", "PLZO_PLZ", stringsAsFactor = F)
# shapeData <- rgdal::readOGR("./Shapefile_PLZ", "PLZO_PLZ", stringsAsFactor = F)
#-------------- LOAD Data --------------#
# Load data about cup consumptionn per day
cups_per_day <- read_delim("~/Desktop/StartHack/04 Git/START19-DCN/data_analysis/cups_per_day.tsv", "\t", escape_double = FALSE, col_types = cols(`PLZ To` = col_number()), trim_ws = TRUE)
names(cups_per_day)[1] <- "PLZ"
names(cups_per_day)[2] <- "PLZ_Name"
cups_per_day$PLZ <- as.integer(cups_per_day$PLZ)
# cups_per_day$PLZ.To <- as.numeric(cups_per_day$PLZ.To)  # Convert type
#-------------- TRANSFORM --------------#
shapeData <- shapeData %>% select('PLZ', 'geometry')
shapeData <- st_transform(shapeData, "+proj=longlat +ellps=WGS84 +datum=WGS84")
# projection(shapeData) <- "+init=epsg:4326"
# # CONVERT SHAPE DATA
#shapeData = spTransform(shapeData, CRS("+proj=longlat +datum=WGS84 +no_defs +init=epsg:4326"))
# shapeTransf <- spTransform(shapeData, CRS("+proj=longlat +datum=WGS84"))
#st_sf(shapeData)
extractCoord <- function(PLZ) {
index <- which(shapeData$PLZ == PLZ)
x <- shapeData[index, "geometry"][[1]][[1]]
x <- data.frame(x[[1]])
colnames(x) <- c('lng', 'lat')
x <- data.frame(x)
x$PLZ <- PLZ
return(x)
}   # Function to get polygons
extractCoordList <- function(plzList){
# FUNCTION THAT EXTRACTS THE LONG/LAT VALUES FOR A LIST OF PLZs AND OUTPUTS
# A DATA FRAME WITH LONG/LAT/PLZ
# INITZATE TEMP DATA FRAME TO SAVE GEO DATA
temp_plz_df <- data.frame()
for(plz in plzList){
if(is.na(plz)|!plz %in% shapeData$PLZ){
next
}
# Extract coord long/lat for current plz
temp_plz_coord <- extractCoord(plz)
if(nrow(temp_plz_df != 0)){
# Only proceed if the loop is in the second iteration
# E.G. temp_plz_df != 0,0
temp_plz_df[nrow(temp_plz_df)+1,] <- NA
} # End add empty row
# Combine with previous coordinates
temp_plz_df <- rbind(temp_plz_df, NULL, temp_plz_coord)
}
# RETRUN LIST OF PLZ & LONG/LAT
return(temp_plz_df)
} # END OF FUNCTION extractCoordList
# LOAD DF FOR RELEVANT PLZ
plzList <- unique(cups_per_day$PLZ)
plzList <- na.omit(plzList)
plz_to_Map <- extractCoordList(plzList)
# ADD VALUES TO PLZ FOR COLOR TESTING
# plz_val <- subset(unique(plz_to_Map$PLZ), !is.na(unique(plz_to_Map$PLZ))) %>% data.frame()
# plz_val$traffic <- sample(1:5000, 5)
# names(plz_val)[1] <- 'PLZ'
# MAP VALUES TO PLZ
plz_to_Map <- left_join(x = plz_to_Map, y = cups_per_day, by = 'PLZ')
# CREATE A COLOR BIN
# pal <- colorNumeric(
#   palette = "viridis",
#   domain = range(1, 50000),
#   na.color = "#808080")
bins <- c(0, 50, 200, 1000, 10000, 100000)
pal <- colorBin("Reds", domain = plz_to_Map$traffic, bins = bins)
# INITIATE MAP
m <- leaflet(plz_to_Map) %>%
# Coordinates Bern 46.94809 7.44744
addTiles() %>%  setView(lng = 7.44744, lat = 46.94809, zoom = 10) %>%
# CartoDB.Positron for grey
# CartoDB.DarkMatter for black
addProviderTiles('CartoDB.Positron') %>%
addPolygons(lng = plz_to_Map$lng , lat = plz_to_Map$lat, opacity = 0, fillOpacity = 0.8, smoothFactor = 0, color = ~pal(na.omit(unique(bins)))) %>% addLegend("bottomright", pal = pal, values = bins, title = "Number of Cups", opacity = 1)
m
m
#-------------- LOAD LIBRARIES --------------#
library(leaflet)
library(sf)
library(rgdal)
library(maps)
library(tidyr)
library(dplyr)
library(viridis)
rm(list = ls())
#-------------- LOAD SHAPE --------------#
shapeData <- sf::read_sf(dsn = "./Shapefile_PLZ", layer = "PLZO_PLZ", as_tibble = F)
#shapeData <- sf::st_read(dsn = "./Shapefile_PLZ", layer = "PLZO_PLZ", as_tibble = F)
#shapeData <- sf::st_read("./Shapefile_PLZ", "PLZO_PLZ", stringsAsFactor = F)
# shapeData <- rgdal::readOGR("./Shapefile_PLZ", "PLZO_PLZ", stringsAsFactor = F)
#-------------- LOAD Data --------------#
# Load data about cup consumptionn per day
cups_per_day <- read_delim("~/Desktop/StartHack/04 Git/START19-DCN/data_analysis/cups_per_day.tsv", "\t", escape_double = FALSE, col_types = cols(`PLZ To` = col_number()), trim_ws = TRUE)
names(cups_per_day)[1] <- "PLZ"
names(cups_per_day)[2] <- "PLZ_Name"
cups_per_day$PLZ <- as.integer(cups_per_day$PLZ)
# cups_per_day$PLZ.To <- as.numeric(cups_per_day$PLZ.To)  # Convert type
#-------------- TRANSFORM --------------#
shapeData <- shapeData %>% select('PLZ', 'geometry')
shapeData <- st_transform(shapeData, "+proj=longlat +ellps=WGS84 +datum=WGS84")
# projection(shapeData) <- "+init=epsg:4326"
# # CONVERT SHAPE DATA
#shapeData = spTransform(shapeData, CRS("+proj=longlat +datum=WGS84 +no_defs +init=epsg:4326"))
# shapeTransf <- spTransform(shapeData, CRS("+proj=longlat +datum=WGS84"))
#st_sf(shapeData)
extractCoord <- function(PLZ) {
index <- which(shapeData$PLZ == PLZ)
x <- shapeData[index, "geometry"][[1]][[1]]
x <- data.frame(x[[1]])
colnames(x) <- c('lng', 'lat')
x <- data.frame(x)
x$PLZ <- PLZ
return(x)
}   # Function to get polygons
extractCoordList <- function(plzList){
# FUNCTION THAT EXTRACTS THE LONG/LAT VALUES FOR A LIST OF PLZs AND OUTPUTS
# A DATA FRAME WITH LONG/LAT/PLZ
# INITZATE TEMP DATA FRAME TO SAVE GEO DATA
temp_plz_df <- data.frame()
for(plz in plzList){
if(is.na(plz)|!plz %in% shapeData$PLZ){
next
}
# Extract coord long/lat for current plz
temp_plz_coord <- extractCoord(plz)
if(nrow(temp_plz_df != 0)){
# Only proceed if the loop is in the second iteration
# E.G. temp_plz_df != 0,0
temp_plz_df[nrow(temp_plz_df)+1,] <- NA
} # End add empty row
# Combine with previous coordinates
temp_plz_df <- rbind(temp_plz_df, NULL, temp_plz_coord)
}
# RETRUN LIST OF PLZ & LONG/LAT
return(temp_plz_df)
} # END OF FUNCTION extractCoordList
# LOAD DF FOR RELEVANT PLZ
plzList <- unique(cups_per_day$PLZ)
plzList <- na.omit(plzList)
plz_to_Map <- extractCoordList(plzList)
# ADD VALUES TO PLZ FOR COLOR TESTING
# plz_val <- subset(unique(plz_to_Map$PLZ), !is.na(unique(plz_to_Map$PLZ))) %>% data.frame()
# plz_val$traffic <- sample(1:5000, 5)
# names(plz_val)[1] <- 'PLZ'
# MAP VALUES TO PLZ
plz_to_Map <- left_join(x = plz_to_Map, y = cups_per_day, by = 'PLZ')
# CREATE A COLOR BIN
# pal <- colorNumeric(
#   palette = "viridis",
#   domain = range(1, 50000),
#   na.color = "#808080")
bins <- c(0, 50, 200, 1000, 10000, 100000)
pal <- colorBin("Reds", domain = plz_to_Map$traffic, bins = bins)
# INITIATE MAP
m <- leaflet(plz_to_Map) %>%
# Coordinates Bern 46.94809 7.44744
addTiles() %>%  setView(lng = 7.44744, lat = 46.94809, zoom = 10) %>%
# CartoDB.Positron for grey
# CartoDB.DarkMatter for black
addProviderTiles('CartoDB.Positron') %>%
addPolygons(lng = plz_to_Map$lng , lat = plz_to_Map$lat, opacity = 0, fillOpacity = 0.8, smoothFactor = 0, color = ~pal(na.omit(unique(bins)))) %>% addLegend("bottomright", pal = pal, values = bins, title = "Number of Cups", opacity = 1)
#-------------- LOAD LIBRARIES --------------#
library(leaflet)   # For map building
library(sf)   # For importing & handling geo-data
library(rgdal)   # For importing & handling geo-data
library(maps)   # For importing map models
library(tidyr)   # For data manipulation & handling
library(dplyr)   # For data manipulation & handling
library(viridis)   # For color pallets
rm(list = ls())   # Remove all objects in storage before starting
#-------------- LOAD SHAPE --------------#
shapeData <- sf::read_sf(dsn = "./Shapefile_PLZ", layer = "PLZO_PLZ", as_tibble = F)
#-------------- LOAD Data --------------#
# Load data about cup consumptionn per day
cups_per_day <- read_delim("~/Desktop/StartHack/04 Git/START19-DCN/data_analysis/cups_per_day.tsv", "\t", escape_double = FALSE, col_types = cols(`PLZ To` = col_number()), trim_ws = TRUE)
# Adapt column names and data types
names(cups_per_day)[1] <- "PLZ"
names(cups_per_day)[2] <- "PLZ_Name"
cups_per_day$PLZ <- as.integer(cups_per_day$PLZ)
#-------------- TRANSFORM --------------#
# LOAD POLYGONS FOR PLZ IN SWITZERLAND
shapeData <- shapeData %>% select('PLZ', 'geometry')
shapeData <- st_transform(shapeData, "+proj=longlat +ellps=WGS84 +datum=WGS84")
extractCoord <- function(PLZ) {
# This funciton extracs the geometry information and
# saves it in a data frame object for a given plz
index <- which(shapeData$PLZ == PLZ)
x <- shapeData[index, "geometry"][[1]][[1]]
x <- data.frame(x[[1]])
colnames(x) <- c('lng', 'lat')
x <- data.frame(x)
x$PLZ <- PLZ
return(x)
}   # Function to get polygons
extractCoordList <- function(plzList){
# This function extracts the geometry information for a
# list of plzs
# INITZATE TEMP DATA FRAME TO SAVE GEO DATA
temp_plz_df <- data.frame()
for(plz in plzList){
# Goes through the list of plzs and creates a
# df with geoinformation
if(is.na(plz)|!plz %in% shapeData$PLZ){
next
}
# Extract coord long/lat for current plz
temp_plz_coord <- extractCoord(plz)
if(nrow(temp_plz_df != 0)){
# Only proceed if the loop is in the second iteration
# E.G. temp_plz_df != 0,0
temp_plz_df[nrow(temp_plz_df)+1,] <- NA
} # End add empty row
# Combine with previous coordinates
temp_plz_df <- rbind(temp_plz_df, NULL, temp_plz_coord)
}
# RETRUN LIST OF PLZ & LONG/LAT
return(temp_plz_df)
} # END OF FUNCTION extractCoordList
# LOAD DF FOR RELEVANT PLZ
plzList <- unique(cups_per_day$PLZ)
plzList <- na.omit(plzList)
plz_to_Map <- extractCoordList(plzList)
#-------------- LOAD LIBRARIES --------------#
library(leaflet)   # For map building
library(sf)   # For importing & handling geo-data
library(rgdal)   # For importing & handling geo-data
library(maps)   # For importing map models
library(tidyr)   # For data manipulation & handling
library(dplyr)   # For data manipulation & handling
library(viridis)   # For color pallets
rm(list = ls())   # Remove all objects in storage before starting
#-------------- LOAD SHAPE --------------#
shapeData <- sf::read_sf(dsn = "./Shapefile_PLZ", layer = "PLZO_PLZ", as_tibble = F)
#-------------- LOAD Data --------------#
# Load data about cup consumptionn per day
cups_per_day <- read_delim("~/Desktop/StartHack/04 Git/START19-DCN/data_analysis/cups_per_day.tsv", "\t", escape_double = FALSE, col_types = cols(`PLZ To` = col_number()), trim_ws = TRUE)
# Adapt column names and data types
names(cups_per_day)[1] <- "PLZ"
names(cups_per_day)[2] <- "PLZ_Name"
cups_per_day$PLZ <- as.integer(cups_per_day$PLZ)
#-------------- TRANSFORM --------------#
# LOAD POLYGONS FOR PLZ IN SWITZERLAND
shapeData <- shapeData %>% select('PLZ', 'geometry')
shapeData <- st_transform(shapeData, "+proj=longlat +ellps=WGS84 +datum=WGS84")
extractCoord <- function(PLZ) {
# This funciton extracs the geometry information and
# saves it in a data frame object for a given plz
index <- which(shapeData$PLZ == PLZ)
x <- shapeData[index, "geometry"][[1]][[1]]
x <- data.frame(x[[1]])
colnames(x) <- c('lng', 'lat')
x <- data.frame(x)
x$PLZ <- PLZ
return(x)
}   # Function to get polygons
extractCoordList <- function(plzList){
# This function extracts the geometry information for a
# list of plzs
# INITZATE TEMP DATA FRAME TO SAVE GEO DATA
temp_plz_df <- data.frame()
for(plz in plzList){
# Goes through the list of plzs and creates a
# df with geoinformation
if(is.na(plz)|!plz %in% shapeData$PLZ){
next
}
# Extract coord long/lat for current plz
temp_plz_coord <- extractCoord(plz)
if(nrow(temp_plz_df != 0)){
# Only proceed if the loop is in the second iteration
# E.G. temp_plz_df != 0,0
temp_plz_df[nrow(temp_plz_df)+1,] <- NA
} # End add empty row
# Combine with previous coordinates
temp_plz_df <- rbind(temp_plz_df, NULL, temp_plz_coord)
}
# RETRUN LIST OF PLZ & LONG/LAT
return(temp_plz_df)
} # END OF FUNCTION extractCoordList
# LOAD DF FOR RELEVANT PLZ
plzList <- unique(cups_per_day$PLZ)
plzList <- na.omit(plzList)
plz_to_Map <- extractCoordList(plzList)
# ADD VALUES TO PLZ FOR COLOR TESTING
# plz_val <- subset(unique(plz_to_Map$PLZ), !is.na(unique(plz_to_Map$PLZ))) %>% data.frame()
# plz_val$traffic <- sample(1:5000, 5)
# names(plz_val)[1] <- 'PLZ'
# MAP VALUES TO PLZ
plz_to_Map <- left_join(x = plz_to_Map, y = cups_per_day, by = 'PLZ')
# CREATE A COLOR BIN
# pal <- colorNumeric(
#   palette = "viridis",
#   domain = range(1, 50000),
#   na.color = "#808080")
bins <- c(0, 50, 200, 1000, 10000, 100000)
pal <- colorBin("Reds", domain = plz_to_Map$traffic, bins = bins)
# INITIATE MAP
m <- leaflet(plz_to_Map) %>%
# Coordinates Bern 46.94809 7.44744
addTiles() %>%  setView(lng = 7.44744, lat = 46.94809, zoom = 10) %>%
# CartoDB.Positron for grey
# CartoDB.DarkMatter for black
addProviderTiles('CartoDB.Positron') %>%
addPolygons(lng = plz_to_Map$lng , lat = plz_to_Map$lat, opacity = 0, fillOpacity = 0.8, smoothFactor = 0, color = ~pal(na.omit(unique(bins)))) %>% addLegend("bottomright", pal = pal, values = bins, title = "Number of Cups", opacity = 1)
# Plot the map object
m
